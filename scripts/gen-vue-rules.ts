import fg from 'fast-glob'
import fs from 'fs'
import { stylistic_base } from '../src/base'
import { Linter } from 'eslint'

function key_in<T extends object>(key: string | number | symbol, obj: T): key is keyof T {
    return key in obj
}

function gen_vue_rules() {

    const files = fg.sync('node_modules/eslint-plugin-vue/lib/rules/*.js')

    const rules: Linter.RulesRecord = {}
    files.forEach(file => {
        const name = file.substring(file.lastIndexOf('/') + 1, file.length - 3)
        if (key_in(name, stylistic_base)) {
            rules[`vue/${name}`] = stylistic_base[name] as Linter.RuleEntry
        }
    })

    fs.writeFileSync('src/vue-rules.ts', `// generated by scripts/vue-rules.ts\nimport { Linter } from 'eslint'\nexport default ${JSON.stringify(rules, null, 4)} as Linter.RulesRecord\n`)
}

gen_vue_rules()
